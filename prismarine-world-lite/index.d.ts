/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface WorldCoords {
  x: number
  y: number
  z: number
}
export interface BlockInfo {
  stateId: number
  light: number
  skyLight: number
  biomeId: number
}
export const enum BlockFace {
  Bottom = 0,
  Top = 1,
  North = 2,
  South = 3,
  West = 4,
  East = 5
}
export interface RaycastResult {
  position: WorldCoords
  face: number
  intersectPoint: Vec3Arg
}
export interface Vec3Arg {
  x: number
  y: number
  z: number
}
export type NapiWorld = World
export declare class World {
  static withVersion(versionString: string): NapiWorld
  /** Loads chunk column data from a network buffer (like `map_chunk` packet data). */
  loadColumn(chunkX: number, chunkZ: number, dataBuffer: Buffer): void
  /** Unloads a chunk column. */
  unloadColumn(chunkX: number, chunkZ: number): void
  /** Gets the state ID of the block at the given world coordinates. */
  getBlockStateId(x: number, y: number, z: number): number
  /** Sets the state ID of the block at the given world coordinates. */
  setBlockStateId(x: number, y: number, z: number, stateId: number): void
  /** Gets a simplified block object (stateId, light, skyLight, biomeId). */
  getBlock(x: number, y: number, z: number): BlockInfo | null
  /** Gets the block light level at the given world coordinates. */
  getBlockLight(x: number, y: number, z: number): number
  /** Gets the sky light level at the given world coordinates. */
  getSkyLight(x: number, y: number, z: number): number
  /** Gets the biome ID at the given world coordinates. */
  getBiomeId(x: number, y: number, z: number): number
  /**
   * Performs a raycast from the origin in the given direction.
   *
   * Args:
   * - `origin`: `{ x: number, y: number, z: number }` - The starting point of the ray.
   * - `direction`: `{ x: number, y: number, z: number }` - The direction vector of the ray (should be normalized).
   * - `max_distance`: `number` - The maximum distance the ray should travel.
   * - `intersect_non_solid_block_names`: `string[] | null` - Optional array of block names (e.g., "water", "grass") to intersect even if they are not solid.
   *
   * Returns:
   * - `object | null`: An object containing `position` (block coords), `face` (number), and `intersect_point` (exact coords), or `null` if no intersection is found within the distance.
   */
  raycast(origin: { x: number, y: number, z: number }, direction: { x: number, y: number, z: number }, max_distance: number, intersect_non_solid_block_names?: string[] | null): RaycastResult | null
}
